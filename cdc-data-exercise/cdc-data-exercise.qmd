---
title: "CDC Data Exercise"
editor: visual
---

## Part 1

The data that I have chosen for this exercise is the NWSS Public SARS-CoV-2 Wastewater Metric Data from the CDC. The link to the website can be found [here](https://data.cdc.gov/Public-Health-Surveillance/NWSS-Public-SARS-CoV-2-Wastewater-Metric-Data/2ew6-ywp6/about_data). ChatGPT and GitHub Copilot were both used to fine-tune the code below.

```{r}
#Load required packages
library(tidyverse)
library(here)
library(ggplot2)
library(janitor)
```
This dataset was initially too big to fit within Git's file size guidelines. To reduce file size, I cut some redundant variables as well as restricted the data to only include observations from 2023 and 2024.
```{r}
#Code to reduce data to acceptable size for Git
#data_path <- here("cdc-data-exercise", "NWSS_Public_SARS-CoV-2_Wastewater_Metric_Data_20250206.csv")
#ww <- read_csv(data_path)
#ww <- ww %>%
  #select(!c(key_plot_id, sample_location_specify, reporting_jurisdiction)) %>% 
  #filter(date_start >= as.Date("2023-01-01") & date_start <= as.Date("2024-12-31"))
#write.csv(ww, 'wastewater.csv', row.names = FALSE)

#Load dataset
data_path <- here("cdc-data-exercise", "wastewater.csv")
df <- read_csv(data_path)


```

```{r}
#Data cleaning

#Convert dates from characters to Date type
df <- df %>%
  mutate(
    date_start = as.Date(date_start, format="%Y-%m-%d"),
    date_end = as.Date(date_end, format="%Y-%m-%d"),
    first_sample_date = as.Date(first_sample_date, format="%Y-%m-%d")
  )

#Handle missing values
df <- df %>%
  replace_na(list(ptc_15d = 0, detect_prop_15d = 0, percentile = 0))

#Convert categorical variables to factors
df <- df %>%
  mutate(
    wwtp_jurisdiction = as.factor(wwtp_jurisdiction),
    sample_location = as.factor(sample_location),
    county_names = as.factor(county_names),
    county_fips = as.factor(county_fips),
    sampling_prior = as.factor(sampling_prior)
  )

str(df)
summary(df)
```

```{r}
#Exploratory Data Analysis

#Names of categorical variables
categorical_vars <- c("wwtp_jurisdiction", "sample_location", "county_names", "county_fips", "sampling_prior")

#Summary of categorical variables
for (var in categorical_vars) {
  summary_table <- df %>%
    count(!!sym(var)) %>%
    mutate(Percent = n / sum(n) * 100)
  
  write_csv(summary_table, paste0(var, "_summary.csv"))
}

#Names of continuous variables
continuous_vars <- df %>%
  select(population_served, ptc_15d, detect_prop_15d, percentile)

for (var in names(continuous_vars)) {
  summary_table <- continuous_vars %>%
    summarise(
      Variable = var,
      Mean = mean(.data[[var]], na.rm = TRUE),
      SD = sd(.data[[var]], na.rm = TRUE),
      Min = min(.data[[var]], na.rm = TRUE),
      Max = max(.data[[var]], na.rm = TRUE),
      Median = median(.data[[var]], na.rm = TRUE)
    )
  write_csv(summary_table, paste0(var, "_summary.csv"))
}

detect_prop_15d_summary <- read_csv("detect_prop_15d_summary.csv")
percentile_summary <- read_csv("percentile_summary.csv")
population_served_summary <- read_csv("population_served_summary.csv")
ptc_15d_summary <- read_csv("ptc_15d_summary.csv")

continuous_summary <- rbind(detect_prop_15d_summary, percentile_summary, population_served_summary, ptc_15d_summary)

write_csv(continuous_summary, "continuous_summary.csv")

summary(df$ptc_15d)
```

```{r}
#Plot distributions of continuous variables
ggplot(df, aes(x = population_served)) +
  geom_histogram(binwidth = 1000, fill = "blue", color = "blue") +
  labs(title = "Distribution of Population Served", x = "Population Served", y = "Frequency")

ggplot(df, aes(x = ptc_15d)) +
  geom_histogram(fill = "green", color = "green") +
  xlim(-100, 100) +
  labs(title = "Distribution of PTC 15d", x = "PTC 15d", y = "Frequency")

ggplot(df, aes(x = detect_prop_15d)) +
  geom_histogram(binwidth = 10, fill = "red", color = "red") +
  labs(title = "Distribution of Detect Prop 15d", x = "Detect Prop 15d", y = "Frequency")

ggplot(df, aes(x = percentile)) +
  geom_histogram(binwidth = 5, fill = "purple", color = "purple") +
  labs(title = "Distribution of Percentile", x = "Percentile", y = "Frequency")

#Save plots
ggsave("population_served_distribution.png")
ggsave("ptc_15d_distribution.png")
ggsave("detect_prop_15d_distribution.png")
ggsave("percentile_distribution.png")

#Plot distributions of categorical variables
ggplot(df, aes(x = wwtp_jurisdiction)) +
  geom_bar(fill = "blue") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  labs(title = "Distribution of wwtp_jurisdiction",
       x = "wwtp_jurisdiction",
       y = "count")

ggplot(filter(df, wwtp_jurisdiction == "Georgia"), aes(x = county_names)) +
  geom_bar(fill = "green") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  labs(title = "Distribution of counties in Georgia",
       x = "counties",
       y = "count")

ggplot(df, aes(x = sample_location)) +
  geom_bar(fill = "red") +
  theme(axis.text.x = element_text(angle = 0.5, hjust = 0.5)) +
  labs(title = "Distribution of sample_location",
       x = "sample location",
       y = "count")

ggplot(df, aes(x = sampling_prior)) +
  geom_bar(fill = "purple") +
  theme(axis.text.x = element_text(angle = 0.5, hjust = 0.5)) +
  labs(title = "Distribution of sampling_prior",
       x = "prior sampling",
       y = "count")

ggsave("jurisdiction_distribution.png")
ggsave("georgia_counties_distribution.png")
ggsave("sample_location_distribution.png")
ggsave("sampling_prior_distribution.png")
```
